<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>使用Hexo搭建博客</title>
    <url>/2023/05/22/1/</url>
    <content><![CDATA[<p>工具：VScode,git,码云,Hexo</p>
<ol>
<li>安装git,官网下载安装<a href="https://git-scm.com/downloads">git下载地址</a></li>
<li>安装node，官网下载安装<a href="https://nodejs.org/zh-cn/download">node下载地址</a></li>
<li>Hexo安装 npm install hexo-cli -g</li>
<li>创建项目 hexo init 项目名称</li>
<li>Hexo主题选择，我选择的是ayer ，把主题下载之后放在themes目录中；或者使用git命令下载ayer主题。</li>
<li>参考<a href="https://hexo.io/zh-cn/">Hexo官网</a>和<a href="https://shen-yu.gitee.io/2019/ayer/">ayer文档</a>说明文档</li>
<li><a href="https://gitee.com/">gitee注册</a>，使用静态页面服务，根据生成的域名就可以访问博客了</li>
<li>Hexo插件</li>
</ol>
<ul>
<li>看板娘 hexo-helper-live2d 模型 live2d-widget-model-z16</li>
<li>搜索 hexo-generator-searchdb</li>
</ul>
<h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 清理编译文件</span><br><span class="line">hexo clean</span><br><span class="line"># 构建静态文件</span><br><span class="line">hexo g</span><br><span class="line"># 启动本地Hexo项目</span><br><span class="line">hexo s</span><br><span class="line"># 上传到仓库</span><br><span class="line">hexo d</span><br><span class="line"># 新增文章，默认在source/_posts目录中</span><br><span class="line">hexo new &quot;文件名称&quot;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Http缓存机制</title>
    <url>/2023/05/26/Cache/</url>
    <content><![CDATA[<ol>
<li>HTTP的缓存机制通常有两种：客户端缓存和服务端缓存</li>
<li>服务端缓存又分为代理服务器缓存和反向代理服务器缓存,其实广泛使用的 CDN 也是一种服务端缓存。</li>
<li>客户端缓存,客户端缓存一般指的是浏览器缓存,有两种：HTML文件 Meta标签和 HTTP协议。<br>3.1 HTML文件 Meta标签<br><code>&lt;META HTTP-EQUIV=&quot;Pragma&quot; CONTENT=&quot;no-cache&quot;&gt;</code><br>但是它的作用很有限，仅有IE能识别这段meta标签含义，其它主流浏览器仅识别“Cache-Control: no-store”的meta标签<br>3.2 http协议，http响应头信息缓存<br>有两种主要的HTTP响应头方式可以控制缓存的行为<br>3.2.1 Expires<br>为一个缓存指定存活时间. 过了这个时间, 就认为被缓存是过期的。<br>Expires 是HTTP 1.0的东西，现在默认浏览器均默认使用HTTP 1.1，所以它的作用基本忽略。Expires 的一个缺点就是，返回的到期时间是服务器端的时间，这样存在一个问题，如果客户端的时间与服务器的时间相差很大（比如时钟不同步，或者跨时区），所以在HTTP 1.1版开始，使用Cache-Control<br>3.2.3 Cache-Control<br>参数：<br>public：表明该资源或者说响应可以被任何用户缓存，比如客户端，代理服务器等都可以缓存资源<br>private：表明该资源只能被单个用户缓存，默认是private，即只能被客户端缓存，不能被代理服务器缓存<br>max-age：表明该资源的有效时间，单位是s<br>no-store：表明该资源不能被缓存，如果缓存了需要删除<br>no-cache：表明客户端需要忽略已存在的缓存，强制每次请求直接发送给服务器<br>max-stale：表明缓存的资源在过期了但未超过max-stale指定的时间，那么就可以继续使用该缓存，超过后就必须去服务器获取<br>must-revalidate：表明在使用缓存前必须要验证旧资源状态，并且不可使用过期资源<br>s-maxage：和max-age含义类似，只不过用于public 修饰的缓存<br>min-fresh：字面意思是最小新鲜度，跟max-age相对应（最大新鲜度），比如max-age&#x3D;3600，min-fresh&#x3D;600，那么 他两的差值就是3000，也就是说缓存真正有效时间只有3000<br>only-if-cached：不管缓存是否过期，即使服务端有更新，只要存在缓存就是用它<br>no-transform：不得对资源进行转换，即代理服务器不能修改Content-Encoding, Content-Range, Content-Type等HTTP头<br>immutable：表示资源在有效期内服务器不会对其更改，这样客户端就不需要再发送验证请求头，比如If-None-Match或If-Modified-Since来检测更新，即使用户主动刷新页面<br>Etag：服务器在响应客户端请求时，会在响应头带上该字段；它表示该资源在服务器中的唯一标识，生成规则由服务器决定，在Apache中，ETag的值默认是对文件的索引节（INode），大小（Size）和最后修改时间（MTime）进行Hash后得到的<br>If-None-Match：这是在请求头中的字段，值就是Etag的值<br>客户端再次发起同一请求时，读取上次缓存的 ETag 值，将其作为 If-None-Match 的值，并与请求数据一同发送给服务端。<br>Last-Modified：标识资源在服务器上的最后修改时间，随着响应头带给客户端<br>If-Modified-Since：这是在请求头中的字段，值就是Last-Modified的值<br>3.3.3 一般情况下，使用Cache-Control&#x2F;Expires会配合Last-Modified&#x2F;ETag一起使用，因为即使服务器设置缓存时间，当用户刷新时，浏览器会忽略（Expires）缓存继续向服务器发送请求，这时Last-Modified&#x2F;ETag就能够起作用，服务器如果资源没有修改就返回304，从而减少响应开销<br>Etag 主要为了解决 Last-Modified 无法解决的一些问题，比如：<br>Last-Modified表示的最后修改时间只能精确到秒级，如果某些文件在1秒钟以内，被修改多次的话，它就不能准确标注文件的新鲜度。</li>
</ol>
]]></content>
      <categories>
        <category>Http</category>
      </categories>
      <tags>
        <tag>缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS响应式布局</title>
    <url>/2023/05/30/2/</url>
    <content><![CDATA[<ol>
<li>可视区域</li>
</ol>
<ul>
<li>用户网页的可视区域（viewport）,设置 viewport<br>一个常用的针对移动网页优化过的页面的 viewport meta 标签大致如下<br><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</code><table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">width</td>
<td align="center">控制 viewport 的大小，如 device-width 为设备的宽度（单位为缩放为 100% 时的 CSS 的像素）</td>
</tr>
<tr>
<td align="center">initial-scale</td>
<td align="center">初始缩放比例，也即是当页面第一次 load 的时候缩放比例</td>
</tr>
</tbody></table>
</li>
</ul>
<ol start="2">
<li>弹性盒子布局</li>
</ol>
<ul>
<li>弹性盒子( flex box ) 是 CSS3 的一种新的布局模式，当页面需要适应不同的屏幕大小以及设备类型时确保元素拥有恰当的行为的布局方式</li>
<li>弹性盒子由弹性容器(Flex container)和弹性子元素(Flex item)组成，弹性容器通过设置 display 属性的值为 flex 或 inline-flex 将其定义为弹性容器<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">justify-content</td>
<td align="center">设置内容水平对齐方式</td>
</tr>
<tr>
<td align="center">align-items</td>
<td align="center">设置内容垂直对齐方式</td>
</tr>
</tbody></table>
</li>
</ul>
<ol start="3">
<li>浮动布局</li>
</ol>
<ul>
<li>float 属性可以设置 HTML 元素浮动，float（浮动），会使元素向左或向右移动，其周围的元素也会重新排列，一个浮动元素会尽量向左或向右移动，直到它的外边缘碰到包含框或另一个浮动框的边框为止，元素浮动之后，周围的元素会重新排列，为了避免这种情况，使用 clear 属性，clear 属性指定元素两侧不能出现浮动元素<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">left</td>
<td align="center">元素向左移动</td>
</tr>
<tr>
<td align="center">right</td>
<td align="center">元素向右移动</td>
</tr>
</tbody></table>
</li>
</ul>
<ol start="4">
<li>定位布局</li>
</ol>
<ul>
<li>position 属性指定了元素的定位类型<br>position 属性的四个值:static、relative、fixed、absolute</li>
<li>元素可以使用顶部，底部，左侧和右侧属性定位</li>
<li>static HTML 元素的默认值，即没有定位，元素出现在正常的流中,静态定位的元素不会受到 top, bottom, left, right 影响</li>
<li>fixed 元素的位置相对于浏览器窗口是固定位置,fixed 定位使元素的位置与文档流无关，因此不占据空间,fixed 定位的元素和其它元素重叠</li>
<li>relative 相对定位元素的定位是相对其本身原来位置,它原本所占的空间不会改变</li>
<li>absolute 绝对定位的元素的位置相对于最近的已定位父元素,如果元素没有已定位的父元素，那么它的位置相对于 &lt;html&gt;,absolute 定位使元素的位置与文档流无关，因此不占据空间,absolute 定位的元素和其它元素重叠</li>
<li>重叠的元素 元素的定位与文档流无关，所以它们可以覆盖页面上的其它元素,z-index 属性指定了一个元素的堆叠顺序,z-index 可以是正数负数或 0 ，数值越大则越显示在顶层</li>
</ul>
<ol start="5">
<li>流式布局(单位使用%)</li>
</ol>
<ul>
<li>流式布局是一种等比例缩放布局方式，在CSS代码中使用百分比来设置长度，也称百分比自适应的布局</li>
</ul>
<ol start="6">
<li>多媒体查询布局</li>
</ol>
<ul>
<li>@media 查询可以针对不同的媒体类型定义不同的样式，@media 可以针对不同的屏幕尺寸设置不同的样式<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">screen</td>
<td align="center">用于电脑屏幕，平板电脑，智能手机等</td>
</tr>
<tr>
<td align="center">max-width</td>
<td align="center">定义输出设备中的页面最大可见区域宽度</td>
</tr>
<tr>
<td align="center">min-width</td>
<td align="center">定义输出设备中的页面最小可见区域宽度</td>
</tr>
</tbody></table>
</li>
</ul>
<ol start="7">
<li>适配不同设备需要使用不同长度单位</li>
</ol>
<ul>
<li>在CSS的长度单位分为两种：绝对长度 和 相对长度,绝对长度：px、in、cm、mm、pt、pc;相对长度：em、rem、ex、vh、vw、vmin、vmax、%、fr<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">px</td>
<td align="center">计算机系统的数字化图像长度单位,1px &#x3D; 1&#x2F;96in</td>
</tr>
<tr>
<td align="center">em</td>
<td align="center">表示相对于父元素的字体大小,em是相对单位 ，没有一个固定的度量值，而是由其他元素尺寸来决定的相对值。默认情况下font-size &#x3D; 16px,那么1em &#x3D; 16px</td>
</tr>
<tr>
<td align="center">rem</td>
<td align="center">相对长度单位，取决于文档根元素（HTML）的字体尺寸，适用于依据字体尺寸进行的排版，适用于自适应</td>
</tr>
<tr>
<td align="center">vw</td>
<td align="center">viewpoint width，视窗宽度，1vw等于视窗宽度的1%。</td>
</tr>
<tr>
<td align="center">vh</td>
<td align="center">viewpoint height，视窗高度，1vh等于视窗高度的1%。</td>
</tr>
</tbody></table>
</li>
</ul>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
</search>
